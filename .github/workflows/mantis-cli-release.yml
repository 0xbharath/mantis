name: Mantis CLI Latest Release

on:
  workflow_dispatch:
    inputs:
      releaseType:
        description: 'What kind of release is this?'
        required: true
        type: choice
        options:
          - 'major'
          - 'minor'
          - 'patch'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: 0xbharath/mantis

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history to access tags

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install Poetry
        run: pip install poetry==1.4.2

      - name: Bump version and add tag
        id: versioning
        run: |
          TAG_VERSION=$(poetry version -s)
          echo "TAG_VERSION=$TAG_VERSION" >> $GITHUB_ENV
          git tag $TAG_VERSION
          git push origin $TAG_VERSION
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.TAG_VERSION }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          labels: ${{ steps.meta.outputs.labels }}

      # Generate changelog and categorize by labels
      - name: Generate Changelog
        id: changelog
        uses: release-drafter/release-drafter@v5
        with:
          config-name: .github/release-drafter.yml

      - name: Create GitHub Release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ env.TAG_VERSION }}
          release_name: Release ${{ env.TAG_VERSION }}
          body: ${{ steps.changelog.outputs.draft_body }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
